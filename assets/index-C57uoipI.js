import{j as e,R as J,a as o}from"./react-BGnJwaX0.js";import{R as Q}from"./react-dom-75QuPTgS.js";import{G as U}from"./@google-BC3p5JGg.js";import"./scheduler-SPyfQU6S.js";import"./zod-Afug2wbS.js";(function(){const d=document.createElement("link").relList;if(d&&d.supports&&d.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))u(s);new MutationObserver(s=>{for(const r of s)if(r.type==="childList")for(const l of r.addedNodes)l.tagName==="LINK"&&l.rel==="modulepreload"&&u(l)}).observe(document,{childList:!0,subtree:!0});function h(s){const r={};return s.integrity&&(r.integrity=s.integrity),s.referrerPolicy&&(r.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?r.credentials="include":s.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function u(s){if(s.ep)return;s.ep=!0;const r=h(s);fetch(s.href,r)}})();var k={};const w=k.API_KEY,I=()=>{const[p,d]=o.useState(null),[h,u]=o.useState(null),[s,r]=o.useState(null),[l,S]=o.useState(!1),[f,c]=o.useState(null),[E,x]=o.useState("Copy All"),[D,y]=o.useState(null),[j,N]=o.useState(!1),v=w?new U({apiKey:w}):null,C=t=>{if(r(null),c(null),x("Copy All"),y(null),t)if(t.type.startsWith("image/")){d(t),u(null);const a=new FileReader;a.onloadend=()=>{u(a.result)},a.readAsDataURL(t)}else d(null),u(null),c(`Invalid file type: "${t.name}". Please upload an image file (e.g., JPG, PNG).`);else d(null),u(null)},A=t=>{var n;const a=(n=t.target.files)==null?void 0:n[0];C(a||null)},T=async t=>({inlineData:{data:await new Promise(n=>{const i=new FileReader;i.onloadend=()=>n(i.result.split(",")[1]),i.readAsDataURL(t)}),mimeType:t.type}}),O=async()=>{if(!p){c("Please select an image first.");return}if(!v){c("Gemini AI client is not initialized. Check API Key.");return}S(!0),c(null),r(null),x("Copy All"),y(null);try{const t=await T(p),a={text:`Critically analyze the provided image to identify all multiple-choice questions and their corresponding options.
Your response MUST be a single, valid JSON array. Each element in the array MUST be a JSON object representing one question.
Each JSON object MUST contain exactly two keys:
1. "question": A string representing the full text of the question.
2. "options": An array of strings, where each string is an individual answer choice. Do NOT include any prefixes (e.g., 'a)', '1.') in these option strings.
Example output for two questions:
[
    {"question": "What is the capital of France?", "options": ["Berlin", "Paris", "Rome", "Madrid"]},
    {"question": "Which planet is known as the Red Planet?", "options": ["Earth", "Mars", "Jupiter", "Venus"]}
]
If no questions are found, return an empty array [].
ABSOLUTELY NO other text, explanations, or markdown formatting should precede or follow this JSON array.`};let i=(await v.models.generateContent({model:"gemini-2.5-flash-preview-04-17",contents:{parts:[t,a]},config:{responseMimeType:"application/json"}})).text.trim();const g=/^```(\w*)?\s*\n?(.*?)\n?\s*```$/s,P=i.match(g);P&&P[2]&&(i=P[2].trim());const m=JSON.parse(i);Array.isArray(m)&&m.every(b=>b&&typeof b.question=="string"&&Array.isArray(b.options)&&b.options.every(G=>typeof G=="string"))?m.length===0?r([]):r(m):(c("The model could not extract the questions correctly. The JSON format might be unexpected or data is missing."),console.error("Unexpected JSON structure:",m),r(null))}catch(t){console.error("Error extracting MCQs:",t),c("An error occurred while extracting the questions. Please try again or check the image format/content.")}finally{S(!1)}},F=o.useCallback(()=>{if(s&&s.length>0){let t="";s.forEach((a,n)=>{n>0&&(t+=`

`),t+=`${a.question}

`,a.options.forEach((i,g)=>{t+=`${String.fromCharCode(97+g)}. ${i}
`})}),navigator.clipboard.writeText(t.trim()).then(()=>{x("Copied!"),setTimeout(()=>x("Copy All"),2e3)}).catch(a=>{console.error("Failed to copy text: ",a),c("Failed to copy text.")})}},[s]),q=o.useCallback(t=>{if(s&&s[t]){const a=s[t];let n=`${a.question}

`;a.options.forEach((i,g)=>{n+=`${String.fromCharCode(97+g)}. ${i}
`}),navigator.clipboard.writeText(n.trim()).then(()=>{y(t),setTimeout(()=>y(null),2e3)}).catch(i=>{console.error("Failed to copy single question: ",i),c("Failed to copy question.")})}},[s]),M=t=>{t.preventDefault(),t.stopPropagation(),N(!0)},R=t=>{t.preventDefault(),t.stopPropagation(),j||N(!0)},$=t=>{t.preventDefault(),t.stopPropagation();const a=t.currentTarget;t.relatedTarget&&a.contains(t.relatedTarget)||N(!1)},L=t=>{t.preventDefault(),t.stopPropagation(),N(!1);const a=t.dataTransfer.files;a&&a.length>0?C(a[0]):C(null)};return!w||!v?e.jsxs("div",{className:"status-message error",role:"alert",children:[e.jsx("h1",{children:"Configuration Error"}),e.jsx("p",{children:"The API_KEY is not configured for the Gemini AI client. Please ensure it is set in the environment variables."})]}):e.jsxs(e.Fragment,{children:[e.jsxs("h1",{children:[e.jsx("span",{role:"img","aria-label":"Magnifying glass icon",children:"🔍"})," MCQ Question Extractor"]}),e.jsxs("div",{className:`input-area ${j?"drag-active":""}`,onDragEnter:M,onDragOver:R,onDragLeave:$,onDrop:L,role:"group","aria-labelledby":"file-upload-instruction-text","aria-describedby":"file-upload-description",children:[e.jsx("p",{id:"file-upload-instruction-text",className:`file-upload-instruction ${j?"drag-instruction-active":""}`,children:j?e.jsxs(e.Fragment,{children:[e.jsx("i",{className:"fa-solid fa-cloud-arrow-down","aria-hidden":"true"})," Drop Image Here!"]}):"Select an image file (e.g., JPG, PNG) containing MCQs, or drag and drop it onto this area."}),e.jsx("p",{id:"file-upload-description",className:"visually-hidden",children:"This area allows you to upload an image by clicking the 'Choose Image' button or by dragging and dropping an image file directly."}),e.jsxs("div",{className:"file-input-container",children:[e.jsx("input",{type:"file",id:"image-upload",accept:"image/*",onChange:A,"aria-describedby":"file-upload-instruction-text",className:"visually-hidden"}),e.jsxs("label",{htmlFor:"image-upload",className:"custom-file-button",children:[e.jsx("i",{className:"fa-solid fa-upload","aria-hidden":"true"})," Choose Image"]}),p&&e.jsx("span",{className:"selected-file-name",children:p.name})]}),h&&e.jsx("img",{src:h,alt:"Preview of uploaded image",className:"image-preview"})]}),h&&!f&&e.jsx(e.Fragment,{children:e.jsx("button",{onClick:O,disabled:!p||l,"aria-live":"polite",children:l?e.jsxs(e.Fragment,{children:[e.jsxs("span",{className:"bouncing-dots-loader","aria-hidden":"true",children:[e.jsx("span",{}),e.jsx("span",{}),e.jsx("span",{})]}),"Extracting..."]}):e.jsxs(e.Fragment,{children:[e.jsx("i",{className:"fa-solid fa-wand-magic-sparkles","aria-hidden":"true"})," Extract"]})})}),f&&e.jsx("div",{className:"status-message error",role:"alert",children:f}),l&&e.jsx("div",{className:"status-message loading",role:"status",children:"Processing image and extracting questions..."}),s&&s.length>0&&e.jsxs("div",{className:"result-area",children:[e.jsx("h2",{children:"Extracted Results:"}),s.map((t,a)=>e.jsxs("div",{className:"extracted-mcq-item","aria-labelledby":`question-heading-${a}`,children:[e.jsx("button",{className:"copy-single-button",onClick:()=>q(a),"aria-label":`Copy Question ${a+1}`,title:`Copy Question ${a+1}`,children:D===a?e.jsx("i",{className:"fa-solid fa-check","aria-hidden":"true"}):e.jsx("i",{className:"fa-solid fa-copy","aria-hidden":"true"})}),e.jsxs("h3",{id:`question-heading-${a}`,className:"question-header",children:["Question ",a+1]}),e.jsxs("div",{className:"extracted-content",children:[e.jsx("p",{className:"extracted-question",children:t.question}),e.jsx("ul",{className:"extracted-options",children:t.options.map((n,i)=>e.jsxs("li",{children:[String.fromCharCode(97+i),". ",n]},i))})]})]},a)),e.jsx("div",{className:"button-group",children:e.jsxs("button",{onClick:F,disabled:l||s.length===0,children:[e.jsx("i",{className:"fa-solid fa-copy","aria-hidden":"true"})," ",E]})})]}),h&&s&&s.length===0&&!l&&!f&&e.jsx("div",{className:"status-message info",role:"status",children:"No questions were found in the uploaded image."})]})},K=Q.createRoot(document.getElementById("root"));K.render(e.jsx(J.StrictMode,{children:e.jsx(I,{})}));
